{"version":3,"file":"static/webpack/static/development/pages/index.js.5339285332986b19363d.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Link from \"next/link\"; // supports client side routing\nimport fetch from \"isomorphic-unfetch\";\nimport Layout from \"../components/MyLayout\";\n// Link is an HOC that accepts href and similar props\n// child components must accept 'onClick' prop\n\n// dynamic pages using query strings\n// const PostLink = props => (\n//     <li>\n//         <Link href={`/post?title=${props.title}`}>\n//             <a>{props.title}</a>\n//         </Link>\n//     </li>\n// );\n\n// const Index = () => (\n//     <Layout>\n//         <h1>My Blog</h1>\n//         <ul>\n//             <PostLink title=\"Hello Next.js\" />\n//             <PostLink title=\"Learn Next.js\" />\n//             <PostLink title=\"Deploy apps with Zeit\" />\n//         </ul>\n//         <p>Hello Next.js</p>\n//     </Layout>\n// );\n\n// dyanmic pages using route masking - clean urls\nconst PostLink = props => (\n    <li>\n        <Link as={`/p/${props.id}`} href={`/post?title=${props.title}`}>\n            <a>{props.title}</a>\n        </Link>\n    </li>\n);\n\nconst Index = props => (\n    <Layout>\n        <h1>My Blog</h1>\n        <ul>\n            <PostLink id=\"hello-nextjs\" title=\"Hello Next.js\" />\n            <PostLink id=\"learn-nextjs\" title=\"Learn Next.js\" />\n            <PostLink id=\"deploy-nextjs\" title=\"Deploy apps with Zeit\" />\n        </ul>\n        <p>Hello Next.js</p>\n        <h1>Batman TV Shows</h1>\n        <ul>\n            {props.shows.map((item, index) => (\n                <li key={index}>\n                    <Link\n                        as={`/p/${item.show.id}`}\n                        href={`/post?id=${item.show.id}`}\n                    >\n                        <a>{show.name}</a>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    </Layout>\n);\n\nIndex.getInitialProps = async function() {\n    const res = await fetch(\"https://api.tvmaze.com/search/shows?q=batman\");\n    const data = await res.json();\n\n    console.log(`data fetched ${data.length}`);\n    console.log(`tv shows ${JSON.stringify(data[0])}`);\n\n    return {\n        shows: data\n    };\n};\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAFA;AACA;AAOA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AAFA;AAFA;AAXA;AACA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAEA;AACA;AALA;AAQA;AADA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}